---
- name: Set Digital Ocean API token
  set_fact:
    do_api_token: "{{ provider_config.api_token | default(lookup('env', 'DO_API_TOKEN')) }}"
  no_log: true

- name: Get existing SSH keys from Digital Ocean
  community.digitalocean.digital_ocean_sshkey_info:
    oauth_token: "{{ do_api_token }}"
  register: do_existing_ssh_keys

- name: Create SSH keys for sudo users if they don't exist in Digital Ocean
  community.digitalocean.digital_ocean_sshkey:
    oauth_token: "{{ do_api_token }}"
    name: "{{ item.0.username }}-{{ item.1.public_key | hash('md5') }}"
    ssh_pub_key: "{{ item.1.public_key }}"
    state: present
  loop: "{{ sudo_users | subelements('authorized_keys') }}"
  register: do_created_ssh_keys
  when: >
    item.1.public_key not in 
    (do_existing_ssh_keys.data | map(attribute='public_key') | list)

- name: Set SSH key IDs for server creation
  set_fact:
    sudo_user_do_ssh_key_fingerprints: >-
      {{
        (do_existing_ssh_keys.data | map(attribute='fingerprint') | list) +
        (do_created_ssh_keys.results | selectattr('changed', 'true') | map(attribute='data.ssh_key.fingerprint') | list)
      }}

- name: Create Digital Ocean droplet
  community.digitalocean.digital_ocean_droplet:
    oauth_token: "{{ do_api_token }}"
    name: "{{ server.server_name }}"
    region: "{{ server.hardware_profile_config.region }}"
    size: "{{ server.hardware_profile_config.size }}"
    image: "{{ server.hardware_profile_config.image }}"
    ssh_keys: "{{ sudo_user_do_ssh_key_fingerprints }}"
    backups: "{{ server.backups | default(true) }}"
  register: do_droplet
  loop: "{{ provider_servers }}"
  loop_control:
    loop_var: server

- name: Validate IP addresses for created servers
  assert:
    that:
      - item.data.droplet.networks.v4 | length > 0 or item.data.droplet.networks.v6 | length > 0
    fail_msg: "Server {{ item.data.droplet.name }} has no IP addresses assigned"
    success_msg: "Server {{ item.data.droplet.name }} has valid IP configuration"
  loop: "{{ do_droplet.results }}"
  when: not item.skipped | default(false)

- name: Set main IP address for each server
  set_fact:
    newly_created_server_ips: "{{ newly_created_server_ips | default({}) | combine({
      item.data.droplet.name: (
        item.data.droplet.networks.v4 | selectattr('type', 'eq', 'public') | map(attribute='ip_address') | first |
        default(item.data.droplet.networks.v6 | selectattr('type', 'eq', 'public') | map(attribute='ip_address') | first)
      )
    }) }}"
  loop: "{{ do_droplet.results }}"
  when: not item.skipped | default(false)
