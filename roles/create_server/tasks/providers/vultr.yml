---
- name: Set Vultr API token
  set_fact:
    vultr_api_token: "{{ provider_config.api_token | default(lookup('env', 'VULTR_API_KEY')) }}"
  no_log: true

- name: Get existing SSH keys from Vultr
  vultr.cloud.ssh_key_info:
    api_key: "{{ vultr_api_token }}"
  register: vultr_existing_ssh_keys

- name: Create SSH keys for sudo users if they don't exist in Vultr
  vultr.cloud.ssh_key:
    api_key: "{{ vultr_api_token }}"
    name: "{{ item.0.username }}-{{ item.1.public_key | hash('md5') }}"
    ssh_key: "{{ item.1.public_key }}"
    state: present
  loop: "{{ sudo_users | subelements('authorized_keys') }}"
  register: vultr_created_ssh_keys
  when: >
    item.1.public_key not in (vultr_existing_ssh_keys.vultr_ssh_key_info | map(attribute='ssh_key') | list)

- name: Set SSH key names for server creation
  set_fact:
    sudo_user_vultr_ssh_key_names: >-
      {{
        (vultr_existing_ssh_keys.vultr_ssh_key_info | map(attribute='name') | list) +
        (vultr_created_ssh_keys.results | selectattr('changed', 'true') | map(attribute='vultr_ssh_key.name') | list)
      }}

- name: Create Vultr server
  vultr.cloud.instance:
    api_key: "{{ vultr_api_token }}"
    label: "{{ server.server_name }}"
    region: "{{ server.hardware_profile_config.region }}"
    plan: "{{ server.hardware_profile_config.plan }}"
    os: "{{ server.hardware_profile_config.os }}"
    backups: "{{ server.backups | default(true) }}"
    ssh_keys: "{{ sudo_user_vultr_ssh_key_names }}"
    activation_email: "{{ server.hardware_profile_config.activation_email | default(true) }}"
    tags: "{{ server.environment | default('')}}"
  register: vultr_created_servers
  loop: "{{ provider_servers }}"
  loop_control:
    loop_var: server

- name: Validate IP addresses for created servers
  assert:
    that:
      - item.vultr_instance.main_ip is defined
    fail_msg: "Server {{ item.vultr_instance.label }} has no IP addresses assigned"
    success_msg: "Server {{ item.vultr_instance.label }} has valid IP configuration"
  loop: "{{ vultr_created_servers.results }}"
  when: not item.failed

- name: Set main IP address for each server
  set_fact:
    server_ips: "{{ server_ips | default({}) | combine({
      item.vultr_instance.label: item.vultr_instance.main_ip
    }) }}"
  loop: "{{ vultr_created_servers.results }}"
  when: not item.failed
