---
- name: Set users variable when there are NOT any additional users.
  ansible.builtin.set_fact:
    flattened_users: "{{ users }}"
  when: additional_users is not defined

- name: Set users variable when there ARE additional users.
  ansible.builtin.set_fact:
    flattened_users: "{{ users + additional_users }}"
  when: additional_users is defined

- name: Configure users.
  ansible.builtin.user:
    name: '{{ item.username }}'
    comment: '{{ item.name | default(omit) }}'
    groups: '{{ item.groups | join(",") | default(omit) }}'
    home: '{{ item.homedir | default(omit) }}'
    password: '{{ item.password | default(omit) }}'
    shell: '{{ item.shell | default("/bin/bash") }}'
    state: '{{ item.state | default("present") }}'
    uid: '{{ item.uid | default(omit) }}'
    update_password: '{{ item.update_password | default("on_create") }}'
  with_items: "{{ flattened_users }}"
  register: created_users

- name: Force password change on next login.
  ansible.builtin.command: chage -d 0 {{ item.item.username }}
  with_items: "{{ created_users.results }}"
  when: 
    - item.changed
    - item.item.password is defined
    - item.item.password | length > 0

- name: Configure authorized keys.
  ansible.posix.authorized_key:
    user: '{{item.0.username}}'
    key: '{{item.1.public_key}}'
    state: '{{item.1.state | default ("present")}}'
  with_subelements:
    - "{{ flattened_users }}"
    - authorized_keys
    - skip_missing: true
  when: item.0.state | default("present") != 'absent'